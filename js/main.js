// Generated by CoffeeScript 1.4.0
(function() {
  var Food, MainSnake, MirrorSnake, areAtSamePlace, atFrameRate, bindEvents, collision, drawingCanvas, gridHeight, gridWidth, hideGameOver, intersect, nextColor, playing, randomPosition, setPlaying, showGameOver, _currentColor, _playing;

  $(function() {
    var food, mainLoop, mainSnake, mirrorSnakes, score;
    drawingCanvas.init();
    mainSnake = new MainSnake;
    mirrorSnakes = [];
    food = new Food;
    score = 0;
    bindEvents(mainSnake);
    mainLoop = function() {
      var snake, _i, _len;
      if (playing()) {
        drawingCanvas.clear();
        mainSnake.move();
        if (areAtSamePlace(mainSnake, food)) {
          mirrorSnakes.push(new MirrorSnake({
            of: mainSnake,
            color: food.color
          }));
          food.regenerate();
          score += 1;
          $('#score-number').text(score);
        }
        for (_i = 0, _len = mirrorSnakes.length; _i < _len; _i++) {
          snake = mirrorSnakes[_i];
          snake.move();
          snake.render();
          if (collision(mainSnake, snake)) {
            setPlaying(false);
            showGameOver();
          }
        }
      }
      food.render();
      return mainSnake.render();
    };
    return atFrameRate(20)["do"](mainLoop);
  });

  _playing = false;

  playing = function() {
    return _playing;
  };

  setPlaying = function(boolean) {
    return _playing = boolean;
  };

  gridWidth = 100;

  gridHeight = 50;

  atFrameRate = function(frameRate) {
    return {
      "do": function(action) {
        return setInterval(action, 1000 / frameRate);
      }
    };
  };

  _currentColor = -1;

  nextColor = function() {
    var colors;
    colors = ['#bc2424', '#2abc24', '#2461bc', '#6c24bc', '#b6bc24', '#24bca3', '#0e2ba6', '#a60e93'];
    _currentColor = (_currentColor + 1) % colors.length;
    return colors[_currentColor];
  };

  randomPosition = function() {
    return {
      x: Math.round(Math.random() * gridWidth),
      y: Math.round(Math.random() * gridHeight)
    };
  };

  areAtSamePlace = function(oneThing, otherThing) {
    return oneThing.position.x === otherThing.position.x && oneThing.position.y === otherThing.position.y;
  };

  intersect = function(oneList, anotherList) {
    var anotherElement, element, _i, _j, _len, _len1;
    for (_i = 0, _len = oneList.length; _i < _len; _i++) {
      element = oneList[_i];
      for (_j = 0, _len1 = anotherList.length; _j < _len1; _j++) {
        anotherElement = anotherList[_j];
        if (element.x === anotherElement.x && element.y === anotherElement.y) {
          return true;
        }
      }
    }
    return false;
  };

  collision = function(oneSnake, anotherSnake) {
    return intersect(oneSnake.occupiedSpace(), anotherSnake.occupiedSpace());
  };

  drawingCanvas = {
    $el: null,
    el: null,
    ctx: null,
    init: function() {
      var minGridSize;
      this.$el = $('canvas');
      this.el = this.$el[0];
      this.el.width = this.$el.width();
      this.el.height = this.$el.height();
      minGridSize = 50;
      if (this.el.height < this.el.width) {
        gridHeight = minGridSize;
        gridWidth = Math.round(minGridSize * this.el.width / this.el.height);
      } else {
        gridHeight = Math.round(minGridSize * this.el.height / this.el.width);
        gridWidth = minGridSize;
      }
      return this.ctx = this.el.getContext('2d');
    },
    clear: function() {
      return this.ctx.clearRect(0, 0, this.el.width, this.el.height);
    },
    drawSquare: function(x, y, color) {
      this.ctx.fillStyle = color;
      return this.ctx.fillRect(x * this.el.width / gridWidth, y * this.el.height / gridHeight, this.el.width / gridWidth, this.el.height / gridHeight);
    }
  };

  bindEvents = function(snake) {
    var changeDirection;
    changeDirection = function(e) {
      if (playing()) {
        return snake.keyPressed(e.keyCode);
      } else if (e.keyCode === 37 || e.keyCode === 38 || e.keyCode === 39 || e.keyCode === 40) {
        hideGameOver();
        return setPlaying(true);
      }
    };
    return $(window).on('keydown', changeDirection);
  };

  showGameOver = function() {
    return $('#game-over').show();
  };

  hideGameOver = function() {
    return $('#game-over').hide();
  };

  MainSnake = (function() {

    MainSnake.prototype.length = 6;

    function MainSnake() {
      this.position = {
        x: Math.round(gridWidth / 2),
        y: Math.round(gridHeight / 2)
      };
      this.history = [
        {
          x: this.position.x,
          y: this.position.y
        }
      ];
      this.color = '#ededed';
      this.direction = 'right';
    }

    MainSnake.prototype.move = function() {
      if (this.direction === 'right') {
        this.position.x += 1;
        if (this.position.x >= gridWidth) {
          this.position.x = 0;
        }
      } else if (this.direction === 'left') {
        this.position.x -= 1;
        if (this.position.x < 0) {
          this.position.x = gridWidth - 1;
        }
      } else if (this.direction === 'up') {
        this.position.y -= 1;
        if (this.position.y < 0) {
          this.position.y = gridHeight - 1;
        }
      } else {
        this.position.y += 1;
        if (this.position.y >= gridHeight) {
          this.position.y = 0;
        }
      }
      return this.history.push({
        x: this.position.x,
        y: this.position.y
      });
    };

    MainSnake.prototype.render = function() {
      var i, _i, _results;
      _results = [];
      for (i = _i = 1; _i <= 6; i = ++_i) {
        if (this.history.length - i > -1) {
          _results.push(drawingCanvas.drawSquare(this.history[this.history.length - i].x, this.history[this.history.length - i].y, this.color));
        } else {
          _results.push(drawingCanvas.drawSquare(this.history[0].x + this.history.length - i, this.history[0].y, this.color));
        }
      }
      return _results;
    };

    MainSnake.prototype.occupiedSpace = function() {
      return this.history.slice(this.history.length - 6, this.history.length);
    };

    MainSnake.prototype.keyPressed = function(keyCode) {
      if (keyCode === 37 && this.direction !== 'right') {
        return this.direction = 'left';
      } else if (keyCode === 38 && this.direction !== 'down') {
        return this.direction = 'up';
      } else if (keyCode === 39 && this.direction !== 'left') {
        return this.direction = 'right';
      } else if (keyCode === 40 && this.direction !== 'up') {
        return this.direction = 'down';
      }
    };

    return MainSnake;

  })();

  MirrorSnake = (function() {

    MirrorSnake.prototype.length = 6;

    function MirrorSnake(params) {
      this.params = params;
      this.color = this.params.color;
      this.originalSnake = this.params.of;
      this.offset = 0;
    }

    MirrorSnake.prototype.move = function() {
      return this.offset += 1;
    };

    MirrorSnake.prototype.render = function() {
      var i, position, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        position = this.originalSnake.history[this.offset + i];
        _results.push(drawingCanvas.drawSquare(position.x, position.y, this.color));
      }
      return _results;
    };

    MirrorSnake.prototype.occupiedSpace = function() {
      return this.originalSnake.history.slice(this.offset, this.offset + this.length);
    };

    return MirrorSnake;

  })();

  Food = (function() {

    function Food() {
      this.position = randomPosition();
      this.color = nextColor();
    }

    Food.prototype.render = function() {
      return drawingCanvas.drawSquare(this.position.x, this.position.y, this.color);
    };

    Food.prototype.regenerate = function() {
      this.position = randomPosition();
      return this.color = nextColor();
    };

    return Food;

  })();

}).call(this);
