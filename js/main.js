// Generated by CoffeeScript 1.10.0
(function() {
  var DrawingCanvas, Food, Game, MainSnake, MirrorSnake, Snake, _currentColor, distance, equiprobable, intersect, nextColor, randomPosition,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $(function() {
    return new Game;
  });

  _currentColor = -1;

  nextColor = function() {
    var colors;
    colors = ['#bc2424', '#2abc24', '#2461bc', '#6c24bc', '#b6bc24', '#24bca3', '#0e2ba6', '#a60e93'];
    _currentColor = (_currentColor + 1) % colors.length;
    return colors[_currentColor];
  };

  equiprobable = function(min, max) {
    return Math.floor(Math.random() * (1 + max - min)) + min;
  };

  distance = function(onePosition, anotherPosition) {
    var xDiff, yDiff;
    xDiff = onePosition.x - anotherPosition.x;
    yDiff = onePosition.y - anotherPosition.y;
    return Math.sqrt(xDiff * xDiff + yDiff * yDiff);
  };

  randomPosition = function(gridWidth, gridHeight) {
    return {
      x: equiprobable(0, gridWidth),
      y: equiprobable(0, gridHeight)
    };
  };

  intersect = function(oneList, anotherList) {
    var anotherElement, element, j, k, len, len1;
    for (j = 0, len = oneList.length; j < len; j++) {
      element = oneList[j];
      for (k = 0, len1 = anotherList.length; k < len1; k++) {
        anotherElement = anotherList[k];
        if (element.x === anotherElement.x && element.y === anotherElement.y) {
          return true;
        }
      }
    }
    return false;
  };

  Snake = (function() {
    function Snake() {}

    Snake.prototype.length = 6;

    Snake.prototype.startDying = function() {
      this.status = 'dying';
      this.swapColor = this.color;
      this.color = 'rgba(0,0,0,0)';
      this.blinkCounter = 0;
      return this.blinkInterval = setInterval((function(_this) {
        return function() {
          var ref;
          _this.blinkCounter += 1;
          ref = [_this.color, _this.swapColor], _this.swapColor = ref[0], _this.color = ref[1];
          console.log(_this.color);
          if (_this.blinkCounter > 8) {
            clearInterval(_this.blinkInterval);
            return _this.status = 'dead';
          }
        };
      })(this), 250);
    };

    return Snake;

  })();

  MainSnake = (function(superClass) {
    extend(MainSnake, superClass);

    function MainSnake() {
      this.status = 'dead';
      this.color = '#ededed';
      this.direction = 'right';
      this.drawingCanvas = new DrawingCanvas($('canvas'));
      this.position = {
        x: Math.round(this.drawingCanvas.gridWidth / 2),
        y: Math.round(this.drawingCanvas.gridHeight / 2)
      };
      this.history = [
        {
          x: this.position.x,
          y: this.position.y
        }
      ];
    }

    MainSnake.prototype.move = function() {
      if (this.direction === 'right') {
        this.position.x += 1;
      } else if (this.direction === 'left') {
        this.position.x -= 1;
      } else if (this.direction === 'up') {
        this.position.y -= 1;
      } else {
        this.position.y += 1;
      }
      this.position.x = this.drawingCanvas.normalizeWidth(this.position.x);
      this.position.y = this.drawingCanvas.normalizeHeight(this.position.y);
      return this.history.push({
        x: this.position.x,
        y: this.position.y
      });
    };

    MainSnake.prototype.render = function() {
      var i, j, results;
      results = [];
      for (i = j = 1; j <= 6; i = ++j) {
        if (this.history.length - i > -1) {
          results.push(this.drawingCanvas.drawSquare(this.history[this.history.length - i].x, this.history[this.history.length - i].y, this.color));
        } else {
          results.push(this.drawingCanvas.drawSquare(this.history[0].x + this.history.length - i, this.history[0].y, this.color));
        }
      }
      return results;
    };

    MainSnake.prototype.occupiedSpace = function() {
      return this.history.slice(this.history.length - 6, this.history.length);
    };

    MainSnake.prototype.keyPressed = function(keyCode) {
      if (keyCode === 37 && this.direction !== 'right') {
        return this.direction = 'left';
      } else if (keyCode === 38 && this.direction !== 'down') {
        return this.direction = 'up';
      } else if (keyCode === 39 && this.direction !== 'left') {
        return this.direction = 'right';
      } else if (keyCode === 40 && this.direction !== 'up') {
        return this.direction = 'down';
      }
    };

    MainSnake.prototype.isEating = function(anotherSnake) {
      var anotherSnakeBody, j, len, position;
      anotherSnakeBody = anotherSnake.occupiedSpace();
      for (j = 0, len = anotherSnakeBody.length; j < len; j++) {
        position = anotherSnakeBody[j];
        if (this.position.x === position.x && this.position.y === position.y) {
          return true;
        }
      }
      return false;
    };

    return MainSnake;

  })(Snake);

  MirrorSnake = (function(superClass) {
    extend(MirrorSnake, superClass);

    function MirrorSnake(params) {
      this.params = params;
      this.color = this.params.color;
      this.originalSnake = this.params.of;
      this.offset = 0;
      this.drawingCanvas = new DrawingCanvas($('canvas'));
    }

    MirrorSnake.prototype.move = function() {
      return this.offset += 1;
    };

    MirrorSnake.prototype.render = function() {
      var i, j, position, ref, results;
      results = [];
      for (i = j = 0, ref = this.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        position = this.originalSnake.history[this.offset + i];
        results.push(this.drawingCanvas.drawSquare(position.x, position.y, this.color));
      }
      return results;
    };

    MirrorSnake.prototype.occupiedSpace = function() {
      return this.originalSnake.history.slice(this.offset, this.offset + this.length);
    };

    MirrorSnake.prototype.isEating = function(anotherSnake) {
      var anotherSnakeBody, j, len, myPosition, position, ref;
      anotherSnakeBody = anotherSnake.occupiedSpace();
      ref = this.occupiedSpace(), myPosition = ref[ref.length - 1];
      for (j = 0, len = anotherSnakeBody.length; j < len; j++) {
        position = anotherSnakeBody[j];
        if (myPosition.x === position.x && myPosition.y === position.y) {
          return true;
        }
      }
      return false;
    };

    return MirrorSnake;

  })(Snake);

  Food = (function() {
    function Food() {
      this.color = nextColor();
      this.drawingCanvas = new DrawingCanvas($('canvas'));
      this.position = randomPosition(this.drawingCanvas.gridWidth, this.drawingCanvas.gridHeight);
    }

    Food.prototype.render = function() {
      this.position.x = this.drawingCanvas.normalizeWidth(this.position.x);
      this.position.y = this.drawingCanvas.normalizeHeight(this.position.y);
      return this.drawingCanvas.drawSquare(this.position.x, this.position.y, this.color);
    };

    Food.prototype.regenerateDependingOn = function(snakePosition) {
      while (true) {
        this.position = randomPosition(this.drawingCanvas.gridWidth, this.drawingCanvas.gridHeight);
        if (this.distanceToCenter() > 10 && this.distanceToSnake(snakePosition) > 10) {
          break;
        }
      }
      return this.color = nextColor();
    };

    Food.prototype.distanceToCenter = function() {
      return distance(this.position, {
        x: this.drawingCanvas.gridWidth / 2,
        y: this.drawingCanvas.gridHeight / 2
      });
    };

    Food.prototype.distanceToSnake = function(snakePosition) {
      return distance(this.position, snakePosition);
    };

    Food.prototype.occupiedSpace = function() {
      return [this.position];
    };

    return Food;

  })();

  Game = (function() {
    function Game() {
      this.foodLoop = bind(this.foodLoop, this);
      this.mainLoop = bind(this.mainLoop, this);
      this.initGame();
      this.initCanvas();
      this.bindEvents();
      this.startMainLoop();
      this.startFoodLoop();
    }

    Game.prototype.initGame = function() {
      this.mainSnake = new MainSnake;
      this.mirrorSnakes = [];
      this.dyingSnakes = [];
      this.foods = [new Food];
      return this.score = 0;
    };

    Game.prototype.initCanvas = function() {
      this.gridWidth = 100;
      this.gridHeight = 50;
      return this.drawingCanvas = new DrawingCanvas($('canvas'));
    };

    Game.prototype.bindEvents = function() {
      return $(window).on('keydown', (function(_this) {
        return function(e) {
          if (e.keyCode === 37 || e.keyCode === 38 || e.keyCode === 39 || e.keyCode === 40) {
            if (_this.mainSnake.status === 'dead') {
              _this.initGame();
              _this.mainSnake.status = 'alive';
            }
            return _this.mainSnake.keyPressed(e.keyCode);
          }
        };
      })(this));
    };

    Game.prototype.startMainLoop = function() {
      this.frameRate = 20;
      return setInterval(this.mainLoop, 1000 / this.frameRate);
    };

    Game.prototype.startFoodLoop = function() {
      this.foodRegenerationTime = 15;
      this.foodCountDown = this.foodRegenerationTime;
      return setInterval(this.foodLoop, 1000);
    };

    Game.prototype.addScore = function() {
      this.score += 1;
      return $('#score-number').text(this.score);
    };

    Game.prototype.resetScore = function() {
      this.score = 0;
      return $('#score-number').text(this.score);
    };

    Game.prototype.mainLoop = function() {
      if (this.mainSnake.status === 'alive') {
        this.moveSnakes();
        this.checkFood();
        this.lookForCollisions();
        this.collectDying();
        this.removeDead();
      }
      return this.renderAll();
    };

    Game.prototype.foodLoop = function() {
      if (this.foodCountDown > 0) {
        return this.foodCountDown -= 1;
      } else {
        this.foodCountDown = this.foodRegenerationTime;
        return this.foods.push(new Food);
      }
    };

    Game.prototype.moveSnakes = function() {
      var j, len, mirrorSnake, ref, results;
      this.mainSnake.move();
      ref = this.mirrorSnakes;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        mirrorSnake = ref[j];
        results.push(mirrorSnake.move());
      }
      return results;
    };

    Game.prototype.checkFood = function() {
      var food, j, len, ref, results, snake;
      ref = this.foods;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        food = ref[j];
        if (this.mainSnake.isEating(food)) {
          this.addSnakeFrom(food);
          this.addScore();
        }
        results.push((function() {
          var k, len1, ref1, results1;
          ref1 = this.mirrorSnakes;
          results1 = [];
          for (k = 0, len1 = ref1.length; k < len1; k++) {
            snake = ref1[k];
            if (snake.isEating(food)) {
              results1.push(this.addSnakeFrom(food));
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    Game.prototype.addSnakeFrom = function(food) {
      this.mirrorSnakes.push(new MirrorSnake({
        of: this.mainSnake,
        color: food.color
      }));
      return food.regenerateDependingOn(this.mainSnake.position);
    };

    Game.prototype.renderAll = function() {
      var dyingSnake, food, j, k, l, len, len1, len2, mirrorSnake, ref, ref1, ref2;
      this.drawingCanvas.clear();
      ref = this.mirrorSnakes;
      for (j = 0, len = ref.length; j < len; j++) {
        mirrorSnake = ref[j];
        mirrorSnake.render();
      }
      ref1 = this.dyingSnakes;
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        dyingSnake = ref1[k];
        dyingSnake.render();
      }
      if (this.mainSnake.status === 'alive') {
        ref2 = this.foods;
        for (l = 0, len2 = ref2.length; l < len2; l++) {
          food = ref2[l];
          food.render();
        }
      }
      return this.mainSnake.render();
    };

    Game.prototype.lookForCollisions = function() {
      var allSnakes, firstSnake, j, len, results, secondSnake;
      allSnakes = [this.mainSnake].concat(this.mirrorSnakes);
      results = [];
      for (j = 0, len = allSnakes.length; j < len; j++) {
        firstSnake = allSnakes[j];
        results.push((function() {
          var k, len1, results1;
          results1 = [];
          for (k = 0, len1 = allSnakes.length; k < len1; k++) {
            secondSnake = allSnakes[k];
            if (firstSnake !== secondSnake && firstSnake.isEating(secondSnake)) {
              results1.push(secondSnake.startDying());
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        })());
      }
      return results;
    };

    Game.prototype.collectDying = function() {
      var aliveSnakes, j, len, mirrorSnake, ref;
      aliveSnakes = [];
      ref = this.mirrorSnakes;
      for (j = 0, len = ref.length; j < len; j++) {
        mirrorSnake = ref[j];
        if (mirrorSnake.status === 'dying') {
          this.dyingSnakes.push(mirrorSnake);
        } else {
          aliveSnakes.push(mirrorSnake);
        }
      }
      return this.mirrorSnakes = aliveSnakes;
    };

    Game.prototype.removeDead = function() {
      var filteredDyingSnakes, j, len, ref, snake;
      filteredDyingSnakes = [];
      ref = this.dyingSnakes;
      for (j = 0, len = ref.length; j < len; j++) {
        snake = ref[j];
        if (snake.status === 'dying') {
          filteredDyingSnakes.push(snake);
        }
      }
      return this.dyingSnakes = filteredDyingSnakes;
    };

    return Game;

  })();

  DrawingCanvas = (function() {
    function DrawingCanvas($el) {
      this.$el = $el;
      this.setSizes = bind(this.setSizes, this);
      this.el = this.$el[0];
      $(window).resize(this.setSizes);
      this.setSizes();
      this.ctx = this.el.getContext('2d');
    }

    DrawingCanvas.prototype.setSizes = function() {
      if (this.el.width !== this.$el.width()) {
        this.el.width = this.$el.width();
      }
      if (this.el.height !== this.$el.height()) {
        this.el.height = this.$el.height();
      }
      this.minGridSize = 50;
      if (this.el.height < this.el.width) {
        this.gridHeight = this.minGridSize;
        return this.gridWidth = Math.round(this.minGridSize * this.el.width / this.el.height);
      } else {
        this.gridHeight = Math.round(this.minGridSize * this.el.height / this.el.width);
        return this.gridWidth = this.minGridSize;
      }
    };

    DrawingCanvas.prototype.clear = function() {
      return this.ctx.clearRect(0, 0, this.el.width, this.el.height);
    };

    DrawingCanvas.prototype.drawSquare = function(x, y, color) {
      this.ctx.fillStyle = color;
      x = this.normalizeWidth(x);
      y = this.normalizeHeight(y);
      return this.ctx.fillRect(x * this.el.width / this.gridWidth, y * this.el.height / this.gridHeight, this.el.width / this.gridWidth, this.el.height / this.gridHeight);
    };

    DrawingCanvas.prototype.normalizeWidth = function(x) {
      return this.normalize(x, this.gridWidth);
    };

    DrawingCanvas.prototype.normalizeHeight = function(y) {
      return this.normalize(y, this.gridHeight);
    };

    DrawingCanvas.prototype.normalize = function(n, mod) {
      while (n < 0) {
        n += mod;
      }
      while (n >= mod) {
        n -= mod;
      }
      return n;
    };

    return DrawingCanvas;

  })();

}).call(this);
